# -*- coding: utf-8 -*-
"""age_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AAn1tbBO5Oz7mljWwcYAgQspssnQRWsn
"""

!pip install ultralytics==8.2.2

# dostęp do plików na Google Drive
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Załaduj plik z danymi
df = pd.read_excel('/content/drive/MyDrive/Klasyfikator_nowy/PraceML/ODIR-5K/full_df.xlsx')
print(df.head())

# Ścieżka do katalogu z obrazami ( u mnie był to Eyes wrzucony na Google Drive)
image_dir = '/content/drive/MyDrive/Klasyfikator_nowy/PraceML/ODIR-5K/allphotos'

import os
# Stwórz listę dostępnych plików
available_images = set(os.listdir(image_dir))

# Sprawdź, które pliki w DF są dostępne
df['is_available'] = df['filename'].apply(lambda x: x in available_images)

# Filtruj tylko te wiersze, które mają dostępne zdjęcia
df_filtered = df[df['is_available'] == True]

# Przypisz przedziały wiekowe (łącznie 90-99 lat do 80s, poniżej 20 do 20s)
df_filtered['age_group'] = pd.cut(df_filtered['Patient Age'],
                                  bins=[0, 30, 40, 50, 60, 70, 80, 100],
                                  labels=['20s', '30s', '40s', '50s', '60s', '70s', '80s'],
                                  right=False)

df_filtered

# Przypisz kody numeryczne do grup wiekowych
df_filtered['label'] = df_filtered['age_group'].cat.codes

df_filtered['age_group'].value_counts()

# Odrzucamy najmniej liczne grupy - 20s i 80s
df_filtered = df_filtered[~df_filtered['age_group'].isin(['20s', '80s'])]

# Zresetuj kategorie w kolumnie 'age_group'
df_filtered['age_group'] = df_filtered['age_group'].cat.remove_unused_categories()

df_filtered['age_group'].value_counts()

# Podziel dane na zbiory treningowe, walidacyjne i testowe
from sklearn.model_selection import train_test_split
train_df, temp_df = train_test_split(df_filtered, test_size=0.2, stratify=df_filtered['label'], random_state=42)
val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df['label'], random_state=42)

# Utwórz katalogi dla przedziałów wiekowych
import shutil
base_dir = '/content/dataset/images'
age_groups = df_filtered['age_group'].cat.categories

for subset in ['train', 'val', 'test']:
    for age_group in age_groups:
        os.makedirs(f'{base_dir}/{subset}/{age_group}', exist_ok=True)

df_filtered['age_group'].value_counts()

# Funkcja przenoszenia plików do odpowiednich folderów na podstawie klasy wiekowej
def move_files_by_age(df, subset):
    for _, row in df.iterrows():
        age_group = row['age_group']
        img_src = os.path.join(image_dir, row['filename'])  # Ścieżka do obrazu
        img_dest = f'{base_dir}/{subset}/{age_group}/' + row['filename']
        shutil.copy(img_src, img_dest)

# Przenieś pliki do odpowiednich folderów
move_files_by_age(train_df, 'train')
move_files_by_age(val_df, 'val')
move_files_by_age(test_df, 'test')

from ultralytics import YOLO

# Inicjalizacja modelu YOLOv8 z wstępnie wytrenowaną siecią
model = YOLO('yolov8n-cls.pt')  # Wersja klasyfikacji

# Rozpocznij trening modelu
model.train(data='/content/dataset/images/', epochs=60, batch=60, imgsz=512, patience=50 )

# Ewaluacja modelu na zestawie testowym
metrics = model.val(data='/content/dataset/images/', split='test')

# Wyświetl wyniki ewaluacji
print(metrics)

# Zipowanie wytrenowanego modelu i datasetu (podzielonego na zbiory train-val-test)
!zip -r model_and_data1.zip yolov8n-cls.pt /content/dataset /content/runs

# Pobieranie danych na komputer
from google.colab import files
files.download('model_and_data1.zip')

import os
import shutil

# Ścieżki do katalogów przedziałów wiekowych dla zestawu testowego
age_test_dirs = [f'/content/dataset/images/test/{age_group}' for age_group in age_groups]

# Ścieżka do głównego katalogu testowego (gdzie YOLOv8 oczekuje obrazów)
test_dir = '/content/dataset/images/test'

# Przeniesienie wszystkich obrazów z katalogów wiekowych do głównego katalogu testowego
for class_dir in age_test_dirs:
    for filename in os.listdir(class_dir):
        file_path = os.path.join(class_dir, filename)
        shutil.move(file_path, test_dir)
    os.rmdir(class_dir)

# Przykład predykcji na zestawie testowym
results = model.predict(source='/content/dataset/images/test', save=True)

# Pobranie przewidywanych klas
y_pred = []

for result in results:
    probabilities = result.probs  # Obiekt zawierający prawdopodobieństwa
    predicted_class = probabilities.top1  # Klasa z najwyższym prawdopodobieństwem
    y_pred.append(predicted_class)

# Prawdziwe etykiety z zestawu testowego
y_true = test_df['label'].tolist()

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Obliczenie macierzy pomyłek
cm = confusion_matrix(y_true, y_pred)

# Wizualizacja macierzy pomyłek
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=age_groups, yticklabels=age_groups)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

from sklearn.metrics import classification_report

# Wyświetlenie szczegółowego raportu klasyfikacji
print(classification_report(y_true, y_pred, target_names=age_groups))

# PEŁNY ZESTAW DANYCH
# Załaduj pełny zestaw danych
full_df = pd.read_excel('/content/drive/MyDrive/Klasyfikator_nowy/PraceML/ODIR-5K/full_df.xlsx')

# Ścieżka do katalogu z obrazami
image_dir = '/content/drive/MyDrive/Klasyfikator_nowy/PraceML/ODIR-5K/allphotos'
available_images = set(os.listdir(image_dir))

# Przefiltruj dane na podstawie dostępnych obrazów
full_df['is_available'] = full_df['filename'].apply(lambda x: x in available_images)
full_df_filtered = full_df[full_df['is_available'] == True]

# Dodaj przedziały wiekowe (łącznie 90-99 lat do 80s, poniżej 20 do 20s)
full_df_filtered['age_group'] = pd.cut(
    full_df_filtered['Patient Age'],
    bins=[0, 30, 40, 50, 60, 70, 80, 100],
    labels=['20s', '30s', '40s', '50s', '60s', '70s', '80s'],
    right=False
)

# Usuń wiersze z przedziałów '20s' i '80s'
full_df_filtered = full_df_filtered[~full_df_filtered['age_group'].isin(['20s', '80s'])]

# Usuń nieaktywne kategorie
full_df_filtered['age_group'] = full_df_filtered['age_group'].cat.remove_unused_categories()

# Przypisz wartości numeryczne dla grup wiekowych
full_df_filtered['label'] = full_df_filtered['age_group'].cat.codes

# Utwórz katalog na pełny zestaw danych do predykcji
full_test_dir = '/content/full_dataset_test'
os.makedirs(full_test_dir, exist_ok=True)

# Skopiuj wszystkie dostępne obrazy do tego katalogu
for _, row in full_df_filtered.iterrows():
    img_src = os.path.join(image_dir, row['filename'])
    img_dest = os.path.join(full_test_dir, row['filename'])
    shutil.copy(img_src, img_dest)

# Przeprowadź predykcję na pełnym zestawie danych
y_pred_full = []
batch_size = 50

for i in range(0, len(os.listdir(full_test_dir)), batch_size):
    batch_files = os.listdir(full_test_dir)[i:i+batch_size]
    batch_results = model.predict(source=[os.path.join(full_test_dir, f) for f in batch_files], save=False, stream=True)
    for result in batch_results:
        predicted_class = result.probs.top1
        y_pred_full.append(predicted_class)

# Prawdziwe etykiety z pełnego zbioru danych
y_true_full = full_df_filtered['label'].tolist()

# Obliczenie macierzy pomyłek
age_groups = full_df_filtered['age_group'].cat.categories
cm_full = confusion_matrix(y_true_full, y_pred_full)

# Wizualizacja macierzy pomyłek
plt.figure(figsize=(10,8))
sns.heatmap(cm_full, annot=True, fmt='d', cmap='Blues', xticklabels=age_groups, yticklabels=age_groups)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix - Full Dataset')
plt.show()

# Wyświetlenie szczegółowego raportu klasyfikacji
print(classification_report(y_true_full, y_pred_full, target_names=age_groups))